<table width="370" cellspacing="0" cellpadding="0" border="0">
<tr>
<td width="370" bgcolor="F9F9F9" valign="top" style="font-size:12px; font-family:Arial, Helvetica, sans-serif, verdana; text-decoration:none">
<!--INSERT CONTENT HERE-->
<b>Transformer - "Next-generation message mediation"</b><br><br>
<b>Solution overview:</b><br>
Transformer is an application for enterprises that have complex business messaging requirements.
It comprises a sophisticated design time GUI with a flexible run time that works within any architecture.
Administration and maintenance of messaging is carried out in a fraction of the time traditionally required and can be carried out by a business analyst for both XML and proprietary messaging.<br><br>
Transformer delivers sophisticated validation and enrichment of messages.
All messages sent to&mdash;e.g. SWIFT, FIX, etc.&mdash;are guaranteed syntactically correct and can comply with relevant network validation rules.<br><br>
Transformer is deployed as a run-time API, integrated within an application server or a JBI container.
Transformer can also operate alongside anything that can make Java calls or within J2EE architectures.<br><br>
<b>Technology features:</b><br><br>
<li>Sophisticated message definition and transformation for complex messaging.</li>
<li>Pure Java and XML high-performance solution.</li>
<li>Reusable Java components with small footprint.</li>
<li>JRE/J2EE/.NET/Web Service/SOA-compatible.</li>
<li>Automatic XML representation of non-XML messages.</li>
<li>Fully extensible.</li>
<li>Supports logical operators, data enrichment, and database access.</li>
<li>Impact analysis&mdash;"where used?"&mdash;in real-time.</li>
<li>Deployment on all standard industry platforms; Solaris OS, AIX, Linux, Windows, etc.</li>
<li>Testing tools built-in for message structure/parsing/validation/serialization, transformations, result comparison, etc.</li><br><br>
<b>Product capabilities that deliver real business benefit:</b><br><br>
<b>Unites XML and non-XML messaging</b><br>
Institutions have to deal with both XML and non-XML systems. Transformer insulates the enterprise from non-XML situations.
All message definitions (including SWIFT, FIX, proprietary back office, etc.) are automatically available as XML schema.
Any existing XML schema can be automatically uploaded into Transformer and seamlessly used alongside other XML and non-XML definitions.<br><br>
<b>Can be used by a business analyst</b><br>
Transformer hides the technicalities of format, syntax, protocols, etc. The focus is on the data as business information.
Business analysts carry out analysis, definition, mapping, and testing.<br><br>
<b>Reuse in message definitions</b><br>
Transformer supports the definition of reusable components. These components can then be used in more complex structures and messages retaining the central definition of the items concerned.
There is no need for any coding as the user maps from, say, a SWIFT date to a back office date.<br><br>
<b>Reuse in mappings and tests</b><br>
Transformer mapping and testing features deliver all the benefits of reuse as well as the flexibility of integrated user extensions (in Java).
Transformer future proofs organizations where mapping requirements become a strategic issue demanding strategic response.<br><br>
<b>Extensible at every level</b><br>
New business object types, parsers, mappings, etc. can be added by the user and automatically integrated within Transformer.
Transformer also includes a rules facility, automated and integrated testing as well as numerous other developer/deployment features.<br><br>
<b>Management of Change</b><br>
Analysis and testing of any change you need to apply for regulatory, new developments or maintenance purposes can be assessed quickly.
Work can be accurately planned from the resulting information. Areas needing additional analysis can be highlighted. Areas to be tested can be noted.
The whole management of the change is made safer and easier. Risk is reduced, costs are minimized and quality is maximized.
<!--END CONTENT-->
</td>
</tr>
</table>
<script language="JavaScript1.2">
var speed, currentpos=curpos1=0,alt=1,curpos2=-1

function initialize(){
if (window.parent.scrollspeed!=0){
speed=window.parent.scrollspeed
scrollwindow()
}
}

function scrollwindow(){
temp=(document.all)? document.body.scrollTop : window.pageYOffset
alt=(alt==0)? 1 : 0
if (alt==0)
curpos1=temp
else
curpos2=temp

window.scrollBy(0,speed)
}

setInterval("initialize()",10)
</script>